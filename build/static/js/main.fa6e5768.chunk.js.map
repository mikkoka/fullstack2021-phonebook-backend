{"version":3,"sources":["services/personService.js","App.js","index.js"],"names":["baseUrl","toExp","getAll","axios","get","then","resp","data","post","newPerson","deletePerson","id","delete","updatePerson","updatedPerson","put","Filter","filterString","onFilterStringChange","value","onChange","PersonForm","addNewEntry","newName","newNumber","onNameInput","onNumberInput","onSubmit","type","Numbers","filterPersons","deleteEntry","map","p","name","number","onClick","App","useState","persons","setPersons","setNewName","setNewNumber","setFilterString","notificationMessage","setNotificationMessage","notificationStyle","setNotificationStyle","successStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","errorStyle","notify","msg","style","setTimeout","useEffect","personService","event","target","preventDefault","indexOfNewName","findIndex","window","confirm","arrayIndex","personToUpdate","updateEntry","newP","concat","filter","toLowerCase","includes","i","catch","err","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa6e5768.chunk.js","sourcesContent":["\nimport axios from 'axios'\n\n\nconst baseUrl = 'http://localhost:3001/api/persons'\n\n\nconst getAll = () => {\n  return axios\n    .get(baseUrl)\n    .then(resp => resp.data)  \n}\n\nconst post = newPerson => {\n  return axios\n    .post(baseUrl, newPerson)\n    .then(resp => resp.data)  \n}\n\nconst deletePerson = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst updatePerson = (updatedPerson) => {\n  const id = updatedPerson.id\n  return axios\n    .put(`${baseUrl}/${id}`, updatedPerson)\n    .then(resp => resp.data)\n}\n\nconst toExp = { getAll, post, deletePerson, updatePerson }\n\nexport default toExp ","import React, { useState, useEffect } from 'react'\nimport personService from './services/personService'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterString, setFilterString ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ notificationStyle, setNotificationStyle ] = useState({})\n\n  const successStyle = {\n    color: 'green',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n  }\n\n  const errorStyle = {\n    color: 'red',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n  }\n\n  const notify = (msg, style) => {\n    setNotificationMessage(msg)\n    setNotificationStyle(style)\n    setTimeout(() => {\n      setNotificationMessage('')\n    setNotificationStyle(null)\n    }, 5000)\n  }\n\n  useEffect(() => {\n\n    personService.getAll()\n      .then(resp => {\n        setPersons(resp)\n    })\n  }, [])\n\n  const onNameInput = (event) => setNewName(event.target.value)\n  const onNumberInput = (event) => setNewNumber(event.target.value)\n  const filterPersons = target => \n    persons.filter(p => p.name.toLowerCase().includes(target.toLowerCase()))\n\n  const onFilterStringChange = (event) => {\n    setFilterString(event.target.value)\n  }\n\n  const updateEntry = (arrayIndex) => {\n    const personToUpdate = persons[arrayIndex]\n\n    const updatedPerson = {\n      ...personToUpdate,\n      number: newNumber \n    }\n\n    personService\n      .updatePerson(updatedPerson)\n      .then(resp => {\n        setPersons(persons.map((p) => p.name !== resp.name ? p : resp))\n        setNewName('')\n        setNewNumber('')\n        notify(`Entry for ${updatedPerson.name} successfully updated`, successStyle)\n      })\n  }\n\n  const addNewEntry = (event) => {\n    event.preventDefault()\n    const indexOfNewName = persons.findIndex(p => p.name === newName)\n\n    if (indexOfNewName > -1) {\n      const makeChange = window.confirm(`${newName} is already added to phonebook. Replace old number with new one?`)\n      if (makeChange) {\n        updateEntry(indexOfNewName)\n      }\n      return \n    }\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    personService.post(newPerson)\n    .then(newP => {\n      setPersons(persons.concat(newP))\n      setNewName('')\n      setNewNumber('')\n      notify(`${newP.name} successfully added`, successStyle)\n    })\n  \n  }\n  const deleteEntry = (i, name) => {\n    const goOn = window.confirm(`Confirm deletion of entry for ${name}?`)\n    if(goOn) {\n      personService.deletePerson(i).then(() => {\n        setPersons(persons.filter(p => p.id !== i))\n        notify(`${name} successfully deleted`, successStyle)\n\n      }).catch ((err) => notify(`${name} has already been deleted`, errorStyle))\n      \n    }\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      {notificationMessage \n        ? <p style={notificationStyle}>{notificationMessage}</p>\n        : <div></div>\n      }   \n\n      <Filter \n        filterString={filterString} \n        onFilterStringChange={onFilterStringChange}>\n      </Filter>\n\n      <PersonForm \n        addNewEntry={addNewEntry}\n        newName={newName}\n        newNumber={newNumber}\n        onNameInput={onNameInput}\n        onNumberInput={onNumberInput}>\n      </PersonForm>\n\n      <Numbers \n        filterPersons={filterPersons}\n        filterString={filterString}\n        deleteEntry={deleteEntry}>\n      </Numbers>\n\n    </div>\n  )\n\n\n}\n\nconst Filter = ({filterString, onFilterStringChange}) => {\n  return (\n    <div>\n        filter shown with: <input value={filterString} onChange={onFilterStringChange}></input>\n    </div>\n  )\n}\nconst PersonForm = ({addNewEntry, newName, newNumber, onNameInput, onNumberInput}) => {\n  return (\n    <div>\n      <h2>Add new number</h2>\n      <form onSubmit={addNewEntry}>\n        <div>\n          name: <input value={newName} onChange={onNameInput}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={onNumberInput}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nconst Numbers = ({filterString, filterPersons, deleteEntry}) => {\n  return (\n    <div>\n\n<h2>Numbers</h2>\n      {filterPersons(filterString).map(p => <p key={p.name}>{p.name} {p.number} <button onClick={() => deleteEntry(p.id, p.name)}>Delete</button></p>)}\n    </div>\n  )\n}\n\n\n// const Notification = ({notificationMessage, notificationStyle}) => {\n//   return (\n//     <p style={notificationStyle}>{notificationMessage}</p>\n//   )\n\n// }\n\nexport default App\n","//import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}